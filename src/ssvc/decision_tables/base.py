#!/usr/bin/env python

#  Copyright (c) 2025 Carnegie Mellon University and Contributors.
#  - see Contributors.md for a full list of Contributors
#  - see ContributionInstructions.md for information on how you can Contribute to this project
#  Stakeholder Specific Vulnerability Categorization (SSVC) is
#  licensed under a MIT (SEI)-style license, please see LICENSE.md distributed
#  with this Software or contact permission@sei.cmu.edu for full terms.
#  Created, in part, with funding and support from the United States Government
#  (see Acknowledgments file). This program may include and/or can make use of
#  certain third party source code, object code, documentation and other files
#  (“Third Party Software”). See LICENSE.md for more details.
#  Carnegie Mellon®, CERT® and CERT Coordination Center® are registered in the
#  U.S. Patent and Trademark Office by Carnegie Mellon University
"""
Provides a DecisionTable class that can be used to model decisions in SSVC
"""
import logging
import re

from pydantic import BaseModel

from ssvc._mixins import _Base, _Commented, _Namespaced, _SchemaVersioned
from ssvc.dp_groups.base import DecisionPointGroup
from ssvc.outcomes.base import OutcomeGroup

logger = logging.getLogger(__name__)


def name_to_key(name: str) -> str:
    """
    Convert a name to a key by converting to lowercase and replacing spaces with underscores.
    """
    # replace non-alphanumeric characters with underscores
    new_name = re.sub(r"[^a-z0-9]+", "_", name.lower())
    return new_name


class DecisionTable(_SchemaVersioned, _Namespaced, _Base, _Commented, BaseModel):
    """
    The DecisionTable class is a model for decisions in SSVC.

    It is a collection of decision points and outcomes, and a mapping of decision points to outcomes.

    The mapping is generated by the PolicyGenerator class, and stored as a dictionary.
    The mapping dict keys are tuples of decision points and decision point values.
    The mapping dict values are outcomes.
    """

    decision_point_group: DecisionPointGroup
    outcome_group: OutcomeGroup

    def combinations(self):
        """Generate possible decision point values"""
        return self.decision_point_group.combination_strings()


# convenience alias
Policy = DecisionTable


def main():
    from ssvc.dp_groups.ssvc.supplier import LATEST as dpg
    from ssvc.outcomes.x_basic.mscw import MSCW as og

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    logger.addHandler(logging.StreamHandler())

    dt = DecisionTable(
        name="Example Prioritization Framework",
        description="The description for an Example Prioritization Framework",
        namespace="x_test",
        version="1.0.0",
        decision_point_group=dpg,
        outcome_group=og,
    )
    print(dt.model_dump_json(indent=2))

    print(list(dt.combinations()))


if __name__ == "__main__":
    main()
