#!/usr/bin/env python
"""
Model the CVSS Exploitability and Exploit Code Maturity metrics as SSVC decision points.
"""

#  Copyright (c) 2023 Carnegie Mellon University and Contributors.
#  - see Contributors.md for a full list of Contributors
#  - see ContributionInstructions.md for information on how you can Contribute to this project
#  Stakeholder Specific Vulnerability Categorization (SSVC) is
#  licensed under a MIT (SEI)-style license, please see LICENSE.md distributed
#  with this Software or contact permission@sei.cmu.edu for full terms.
#  Created, in part, with funding and support from the United States Government
#  (see Acknowledgments file). This program may include and/or can make use of
#  certain third party source code, object code, documentation and other files
#  (“Third Party Software”). See LICENSE.md for more details.
#  Carnegie Mellon®, CERT® and CERT Coordination Center® are registered in the
#  U.S. Patent and Trademark Office by Carnegie Mellon University

from ssvc.decision_points.base import SsvcDecisionPointValue
from ssvc.decision_points.cvss._not_defined import NOT_DEFINED_ND, NOT_DEFINED_X
from ssvc.decision_points.cvss.base import CvssDecisionPoint
from ssvc.decision_points.helpers import print_versions_and_diffs

_HIGH_2 = SsvcDecisionPointValue(
    name="High",
    key="H",
    description="Functional autonomous code exists, or no exploit is required (manual trigger) and details are widely "
    "available. Exploit code works in every situation, or is actively being delivered via an autonomous "
    "agent (such as a worm or virus). Network-connected systems are likely to encounter scanning or "
    "exploitation attempts. Exploit development has reached the level of reliable, widely-available, "
    "easy-to-use automated tools.",
)

_FUNCTIONAL_2 = SsvcDecisionPointValue(
    name="Functional",
    key="F",
    description="Functional exploit code is available. The code works in most situations where the vulnerability "
    "exists.",
)

_PROOF_OF_CONCEPT_2 = SsvcDecisionPointValue(
    name="Proof-of-Concept",
    key="POC",
    description="Proof-of-concept exploit code is available, or an attack demonstration is not practical for most "
    "systems. The code or technique is not functional in all situations and may require substantial "
    "modification by a skilled attacker.",
)

_UNPROVEN_2 = SsvcDecisionPointValue(
    name="Unproven",
    key="U",
    description="No exploit code is available, or an exploit is theoretical.",
)

_HIGH = SsvcDecisionPointValue(
    name="High",
    key="H",
    description="Either the vulnerability is exploitable by functional mobile autonomous code or no exploit is "
    "required (manual trigger) and the details for the manual technique are widely available. The code "
    "works in every situation where the vulnerability is exploitable and/or is actively being delivered "
    "via a mobile autonomous agent (a worm or virus).",
)

_FUNCTIONAL = SsvcDecisionPointValue(
    name="Functional",
    key="F",
    description="Functional exploit code is available. The code works in most situations where the vulnerability is "
    "exploitable.",
)

_PROOF_OF_CONCEPT = SsvcDecisionPointValue(
    name="Proof of Concept",
    key="P",
    description="Proof of concept exploit code or an attack demonstration that is not practically applicable to "
    "deployed systems is available. The code or technique is not functional in all situations and may "
    "require substantial hand tuning by a skilled attacker for use against deployed systems.",
)

_UNPROVEN = SsvcDecisionPointValue(
    name="Unproven",
    key="U",
    description="No exploit code is yet available or an exploit method is entirely theoretical.",
)

EXPLOITABILITY_1 = CvssDecisionPoint(
    name="Exploitability",
    description="This metric measures the current state of exploit technique or code availability and suggests a "
    "likelihood of exploitation.",
    key="E",
    version="1.0.0",
    values=(
        _UNPROVEN,
        _PROOF_OF_CONCEPT,
        _FUNCTIONAL,
        _HIGH,
    ),
)
"""
Defines Unproven, Proof of Concept, Functional, and High values for CVSS Exploitability.
"""

EXPLOITABILITY_1_1 = CvssDecisionPoint(
    name="Exploitability",
    description="This metric measures the current state of exploit technique or code availability and suggests a "
    "likelihood of exploitation.",
    key="E",
    version="1.1.0",
    values=(
        _UNPROVEN,
        _PROOF_OF_CONCEPT,
        _FUNCTIONAL,
        _HIGH,
        NOT_DEFINED_ND,
    ),
)
"""
Introduced Not Defined value.
"""


EXPLOIT_CODE_MATURITY_1_2 = CvssDecisionPoint(
    name="Exploit Code Maturity",
    description="measures the likelihood of the vulnerability being attacked, and is typically based on the current "
    "state of exploit techniques, exploit code availability, or active, 'in-the-wild' exploitation",
    key="E",
    version="1.2.0",
    values=(
        _UNPROVEN_2,
        _PROOF_OF_CONCEPT_2,
        _FUNCTIONAL_2,
        _HIGH_2,
        NOT_DEFINED_X,
    ),
)
"""
Name changed to Exploit Code Maturity. Updated descriptions of values.
"""


_ATTACKED = SsvcDecisionPointValue(
    name="Attacked",
    key="A",
    description="Based on available threat intelligence either of the following must apply: Attacks targeting "
    "this vulnerability (attempted or successful) have been reported Solutions to simplify attempts "
    "to exploit the vulnerability are publicly or privately available (such as exploit toolkits)",
)

_PROOF_OF_CONCEPT_3 = SsvcDecisionPointValue(
    name="Proof-of-Concept",
    key="P",
    description="Based on available threat intelligence each of the following must apply: Proof-of-concept exploit "
    "code is publicly available No knowledge of reported attempts to exploit this vulnerability No "
    "knowledge of publicly available solutions used to simplify attempts to exploit the vulnerability "
    "(i.e., the “Attacked” value does not apply)",
)

_UNREPORTED = SsvcDecisionPointValue(
    name="Unreported",
    key="U",
    description="Based on available threat intelligence each of the following must apply: No knowledge of publicly "
    "available proof-of-concept exploit code No knowledge of reported attempts to exploit this "
    "vulnerability No knowledge of publicly available solutions used to simplify attempts to exploit "
    "the vulnerability (i.e., neither the “POC” nor “Attacked” values apply)",
)

EXPLOIT_MATURITY_2 = CvssDecisionPoint(
    name="Exploit Maturity",
    key="E",
    description="This metric measures the likelihood of the vulnerability being attacked, and is based on the current "
    "state of exploit techniques, exploit code availability, or active, “in-the-wild” exploitation.",
    version="2.0.0",
    values=(
        _UNREPORTED,
        _PROOF_OF_CONCEPT_3,
        _ATTACKED,
        NOT_DEFINED_X,
    ),
)

versions = [
    EXPLOITABILITY_1,
    EXPLOITABILITY_1_1,
    EXPLOIT_CODE_MATURITY_1_2,
    EXPLOIT_MATURITY_2,
]


def main():
    print_versions_and_diffs(versions)


if __name__ == "__main__":
    main()
