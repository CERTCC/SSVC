#!/usr/bin/env python
"""
file: exploitability
author: adh
created_at: 9/20/23 1:47 PM
"""

from copy import deepcopy

from ssvc.decision_points.base import SsvcDecisionPointValue
from ssvc.decision_points.cvss.base import CvssDecisionPoint

NOT_DEFINED = SsvcDecisionPointValue(
    name="Not Defined",
    key="ND",
    description="Assigning this value to the metric will not influence the score. It is a signal to a scoring equation to skip this metric.",
)

HIGH_2 = SsvcDecisionPointValue(
    name="High",
    key="H",
    description="Functional autonomous code exists, or no exploit is required (manual trigger) and details are widely available. Exploit code works in every situation, or is actively being delivered via an autonomous agent (such as a worm or virus). Network-connected systems are likely to encounter scanning or exploitation attempts. Exploit development has reached the level of reliable, widely-available, easy-to-use automated tools.",
)

FUNCTIONAL_2 = SsvcDecisionPointValue(
    name="Functional",
    key="F",
    description="Functional exploit code is available. The code works in most situations where the vulnerability exists.",
)

PROOF_OF_CONCEPT_2 = SsvcDecisionPointValue(
    name="Proof-of-Concept",
    key="POC",
    description="Proof-of-concept exploit code is available, or an attack demonstration is not practical for most systems. The code or technique is not functional in all situations and may require substantial modification by a skilled attacker.",
)

UNPROVEN_2 = SsvcDecisionPointValue(
    name="Unproven",
    key="U",
    description="No exploit code is available, or an exploit is theoretical.",
)

HIGH = SsvcDecisionPointValue(
    name="High",
    key="H",
    description="Either the vulnerability is exploitable by functional mobile autonomous code or no exploit is required (manual trigger) and the details for the manual technique are widely available. The code works in every situation where the vulnerability is exploitable and/or is actively being delivered via a mobile autonomous agent (a worm or virus).",
)

FUNCTIONAL = SsvcDecisionPointValue(
    name="Functional",
    key="F",
    description="Functional exploit code is available. The code works in most situations where the vulnerability is exploitable.",
)

PROOF_OF_CONCEPT = SsvcDecisionPointValue(
    name="Proof of Concept",
    key="P",
    description="Proof of concept exploit code or an attack demonstration that is not practically applicable to deployed systems is available. The code or technique is not functional in all situations and may require substantial hand tuning by a skilled attacker for use against deployed systems.",
)

UNPROVEN = SsvcDecisionPointValue(
    name="Unproven",
    key="U",
    description="No exploit code is yet available or an exploit method is entirely theoretical.",
)

EXPLOITABILITY_1 = CvssDecisionPoint(
    name="Exploitability",
    description="This metric measures the current state of exploit technique or code availability and suggests a likelihood of exploitation.",
    key="E",
    version="1.0.0",
    values=(
        UNPROVEN,
        PROOF_OF_CONCEPT,
        FUNCTIONAL,
        HIGH,
    ),
)


# CVSS v2 introduced the concept of "Not Defined" values without changing the other values.
EXPLOITABILITY_1_1 = deepcopy(EXPLOITABILITY_1)
EXPLOITABILITY_1_1.version = "1.1.0"
nd = SsvcDecisionPointValue(name="Not Defined", key="ND", description="Not Defined")
values = list(EXPLOITABILITY_1_1.values)
values.append(nd)
EXPLOITABILITY_1_1.values = tuple(values)


# CVSS v3 modified the descriptions of the values.
EXPLOIT_CODE_MATURITY_1_1_1 = deepcopy(EXPLOITABILITY_1_1)
EXPLOIT_CODE_MATURITY_1_1_1.name = "Exploit Code Maturity"
EXPLOIT_CODE_MATURITY_1_1_1.description = "measures the likelihood of the vulnerability being attacked, and is typically based on the current state of exploit techniques, exploit code availability, or active, 'in-the-wild' exploitation"
EXPLOIT_CODE_MATURITY_1_1_1.version = "1.1.1"
EXPLOIT_CODE_MATURITY_1_1_1.values = (
    UNPROVEN_2,
    PROOF_OF_CONCEPT_2,
    FUNCTIONAL_2,
    HIGH_2,
    NOT_DEFINED,
)


def main():
    print(EXPLOITABILITY_1.to_json(indent=2))
    print(EXPLOITABILITY_1_1.to_json(indent=2))
    print(EXPLOIT_CODE_MATURITY_1_1_1.to_json(indent=2))


if __name__ == "__main__":
    main()
