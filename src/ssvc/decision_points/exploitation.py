#!/usr/bin/env python
"""
Provides the Exploitation decision point and its values.
"""
#  Copyright (c) 2024-2025 Carnegie Mellon University and Contributors.
#  - see Contributors.md for a full list of Contributors
#  - see ContributionInstructions.md for information on how you can Contribute to this project
#  Stakeholder Specific Vulnerability Categorization (SSVC) is
#  licensed under a MIT (SEI)-style license, please see LICENSE.md distributed
#  with this Software or contact permission@sei.cmu.edu for full terms.
#  Created, in part, with funding and support from the United States Government
#  (see Acknowledgments file). This program may include and/or can make use of
#  certain third party source code, object code, documentation and other files
#  (“Third Party Software”). See LICENSE.md for more details.
#  Carnegie Mellon®, CERT® and CERT Coordination Center® are registered in the
#  U.S. Patent and Trademark Office by Carnegie Mellon University

from ssvc.decision_points.base import SsvcDecisionPoint, SsvcDecisionPointValue
from ssvc.decision_points.helpers import print_versions_and_diffs

ACTIVE = SsvcDecisionPointValue(
    name="Active",
    key="A",
    description="Shared, observable, reliable evidence that the exploit is being"
    " used in the wild by real attackers; there is credible public reporting.",
)

POC_1 = SsvcDecisionPointValue(
    name="PoC",
    key="P",
    description="One of the following cases is true: (1) private evidence of exploitation is attested but not shared; "
    "(2) widespread hearsay attests to exploitation; (3) typical public PoC in places such as Metasploit"
    " or ExploitDB; or (4) the vulnerability has a well-known method of exploitation.",
)

POC_2 = SsvcDecisionPointValue(
    name="Public PoC",
    key="P",
    description="One of the following is true: (1) Typical public PoC exists in sources such as Metasploit or websites like ExploitDB; or (2) the vulnerability has a well-known method of exploitation.",
)

EXP_NONE = SsvcDecisionPointValue(
    name="None",
    key="N",
    description="There is no evidence of active exploitation and no public proof of concept (PoC) of how to exploit the vulnerability.",
)


def _strip_spaces(s):
    return " ".join([x.strip() for x in s.splitlines()])


EXPLOITATION_1 = SsvcDecisionPoint(
    name="Exploitation",
    description="The present state of exploitation of the vulnerability.",
    key="E",
    version="1.0.0",
    values=(
        EXP_NONE,
        POC_1,
        ACTIVE,
    ),
)

EXPLOITATION_1_1_0 = SsvcDecisionPoint(
    name="Exploitation",
    description="The present state of exploitation of the vulnerability.",
    key="E",
    version="1.1.0",
    values=(
        EXP_NONE,
        POC_2,
        ACTIVE,
    ),
)

VERSIONS = (EXPLOITATION_1, EXPLOITATION_1_1_0)
LATEST = VERSIONS[-1]


def main():
    print_versions_and_diffs(VERSIONS)


if __name__ == "__main__":
    main()
